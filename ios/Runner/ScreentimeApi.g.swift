// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsScreentimeApi(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsScreentimeApi(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsScreentimeApi(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashScreentimeApi(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashScreentimeApi(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashScreentimeApi(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

/// Generated class from Pigeon that represents data sent in messages.
struct ThresholdConfig: Hashable {
  var configId: String? = nil
  var bundleIds: [String?]? = nil
  var secondsLimit: Int64? = nil
  var schedule: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ThresholdConfig? {
    let configId: String? = nilOrValue(pigeonVar_list[0])
    let bundleIds: [String?]? = nilOrValue(pigeonVar_list[1])
    let secondsLimit: Int64? = nilOrValue(pigeonVar_list[2])
    let schedule: String? = nilOrValue(pigeonVar_list[3])

    return ThresholdConfig(
      configId: configId,
      bundleIds: bundleIds,
      secondsLimit: secondsLimit,
      schedule: schedule
    )
  }
  func toList() -> [Any?] {
    return [
      configId,
      bundleIds,
      secondsLimit,
      schedule,
    ]
  }
  static func == (lhs: ThresholdConfig, rhs: ThresholdConfig) -> Bool {
    return deepEqualsScreentimeApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashScreentimeApi(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MonitorEvent: Hashable {
  var configId: String? = nil
  var type: String? = nil
  var occurredAtEpochSec: Int64? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MonitorEvent? {
    let configId: String? = nilOrValue(pigeonVar_list[0])
    let type: String? = nilOrValue(pigeonVar_list[1])
    let occurredAtEpochSec: Int64? = nilOrValue(pigeonVar_list[2])

    return MonitorEvent(
      configId: configId,
      type: type,
      occurredAtEpochSec: occurredAtEpochSec
    )
  }
  func toList() -> [Any?] {
    return [
      configId,
      type,
      occurredAtEpochSec,
    ]
  }
  static func == (lhs: MonitorEvent, rhs: MonitorEvent) -> Bool {
    return deepEqualsScreentimeApi(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashScreentimeApi(value: toList(), hasher: &hasher)
  }
}

private class ScreentimeApiPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return ThresholdConfig.fromList(self.readValue() as! [Any?])
    case 130:
      return MonitorEvent.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class ScreentimeApiPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ThresholdConfig {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? MonitorEvent {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class ScreentimeApiPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ScreentimeApiPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ScreentimeApiPigeonCodecWriter(data: data)
  }
}

class ScreentimeApiPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = ScreentimeApiPigeonCodec(readerWriter: ScreentimeApiPigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ScreentimeHostApi {
  func requestAuthorization() throws -> Bool
  func presentFamilyActivityPicker() throws -> Bool
  func hasSavedSelection() throws -> Bool
  func startMonitoring(cfg: ThresholdConfig) throws -> Bool
  func stopMonitoring(configId: String) throws -> Bool
  func readAndClearMonitorEvents() throws -> [MonitorEvent?]
  func appGroupId() throws -> String
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ScreentimeHostApiSetup {
  static var codec: FlutterStandardMessageCodec { ScreentimeApiPigeonCodec.shared }
  /// Sets up an instance of `ScreentimeHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ScreentimeHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let requestAuthorizationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_device_activity.ScreentimeHostApi.requestAuthorization\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      requestAuthorizationChannel.setMessageHandler { _, reply in
        do {
          let result = try api.requestAuthorization()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      requestAuthorizationChannel.setMessageHandler(nil)
    }
    let presentFamilyActivityPickerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_device_activity.ScreentimeHostApi.presentFamilyActivityPicker\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      presentFamilyActivityPickerChannel.setMessageHandler { _, reply in
        do {
          let result = try api.presentFamilyActivityPicker()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      presentFamilyActivityPickerChannel.setMessageHandler(nil)
    }
    let hasSavedSelectionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_device_activity.ScreentimeHostApi.hasSavedSelection\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      hasSavedSelectionChannel.setMessageHandler { _, reply in
        do {
          let result = try api.hasSavedSelection()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      hasSavedSelectionChannel.setMessageHandler(nil)
    }
    let startMonitoringChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_device_activity.ScreentimeHostApi.startMonitoring\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startMonitoringChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let cfgArg = args[0] as! ThresholdConfig
        do {
          let result = try api.startMonitoring(cfg: cfgArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startMonitoringChannel.setMessageHandler(nil)
    }
    let stopMonitoringChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_device_activity.ScreentimeHostApi.stopMonitoring\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopMonitoringChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let configIdArg = args[0] as! String
        do {
          let result = try api.stopMonitoring(configId: configIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopMonitoringChannel.setMessageHandler(nil)
    }
    let readAndClearMonitorEventsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_device_activity.ScreentimeHostApi.readAndClearMonitorEvents\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      readAndClearMonitorEventsChannel.setMessageHandler { _, reply in
        do {
          let result = try api.readAndClearMonitorEvents()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      readAndClearMonitorEventsChannel.setMessageHandler(nil)
    }
    let appGroupIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_device_activity.ScreentimeHostApi.appGroupId\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      appGroupIdChannel.setMessageHandler { _, reply in
        do {
          let result = try api.appGroupId()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      appGroupIdChannel.setMessageHandler(nil)
    }
  }
}
